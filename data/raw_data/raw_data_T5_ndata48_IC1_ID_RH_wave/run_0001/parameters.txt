model.spectral_grid
SpectralGrid{Spectrum{...}, SpeedyWeather.RingGrids.OctahedralGaussianGrid{...}}
├ Spectral:   T5 LowerTriangularMatrix{Complex{Float32}}, radius = 6.371e6 m
├ Grid:       Field{Float32} on 8-ring SpeedyWeather.RingGrids.OctahedralGaussianGrid, 208 grid points
├ Resolution: 1566km (average)
├ Vertical:     1-layer atmosphere, 2-layer land
└ Architecture: SpeedyWeather.Architectures.CPU{KernelAbstractions.CPU}(KernelAbstractions.CPU(false)) using Array


model.architecture
SpeedyWeather.Architectures.CPU{KernelAbstractions.CPU}(KernelAbstractions.CPU(false))

model.geometry
Geometry for SpectralGrid{Spectrum{...}, SpeedyWeather.RingGrids.OctahedralGaussianGrid{...}}
├ Spectral:   T5 LowerTriangularMatrix{Complex{Float32}}, radius = 6.371e6 m
├ Grid:       Field{Float32} on 8-ring SpeedyWeather.RingGrids.OctahedralGaussianGrid, 208 grid points
├ Resolution: 1566km (average)
├ Vertical:     1-layer atmosphere, 2-layer land
└ Architecture: SpeedyWeather.Architectures.CPU{KernelAbstractions.CPU}(KernelAbstractions.CPU(false)) using Array


model.planet
SpeedyWeather.Earth{Float32} <: SpeedyWeather.AbstractPlanet
├ rotation::Float32 = 7.29e-5
├ gravity::Float32 = 9.81
├ daily_cycle::Bool = true
├ length_of_day::Dates.Second = 86400 seconds
├ seasonal_cycle::Bool = true
├ length_of_year::Dates.Second = 31557600 seconds
├ equinox::Dates.DateTime = 2000-03-20T00:00:00
├ axial_tilt::Float32 = 23.4
└ solar_constant::Float32 = 1365.0

model.atmosphere
SpeedyWeather.EarthAtmosphere{Float32} <: SpeedyWeather.AbstractAtmosphere
├ mol_mass_dry_air::Float32 = 28.9649
├ mol_mass_vapour::Float32 = 18.0153
├ heat_capacity::Float32 = 1004.0
├ R_gas::Float32 = 8.3145
├ R_dry::Float32 = 287.05432
├ R_vapour::Float32 = 461.52438
├ mol_ratio::Float32 = 0.62197006
├ μ_virt_temp::Float32 = 0.60779446
├ κ::Float32 = 0.2859107
├ water_density::Float32 = 1000.0
├ latent_heat_condensation::Float32 = 2.501e6
├ latent_heat_sublimation::Float32 = 2.801e6
├ stefan_boltzmann::Float32 = 5.67e-8
├ pres_ref::Float32 = 100000.0
├ temp_ref::Float32 = 288.0
├ moist_lapse_rate::Float32 = 0.005
├ dry_lapse_rate::Float32 = 0.0098
└ layer_thickness::Float32 = 8500.0

model.coriolis
SpeedyWeather.Coriolis{Float32, Vector{Float32}} <: SpeedyWeather.AbstractCoriolis
├ nlat::Int64 = 8
└── arrays: f

model.forcing
SpeedyWeather.KolmogorovFlow{Float32} <: SpeedyWeather.AbstractForcing
├ strength::Float32 = 3.0e-12
└ wavenumber::Float32 = 8.0

model.drag
SpeedyWeather.LinearVorticityDrag{Float32} <: SpeedyWeather.AbstractDrag
└ c::Float32 = 1.0e-7

model.particle_advection
SpeedyWeather.NoParticleAdvection <: SpeedyWeather.AbstractParticleAdvection


model.initial_conditions
SpeedyWeather.InitialConditions{SpeedyWeather.RandomVelocity, SpeedyWeather.ZeroInitially, SpeedyWeather.ZeroInitially, SpeedyWeather.ZeroInitially} <: SpeedyWeather.AbstractInitialConditions
├ vordiv::SpeedyWeather.RandomVelocity = SpeedyWeather.RandomVelocity <: SpeedyWeather.AbstractInitialConditions
├ max_speed::Float64 = 60.0
├ truncation::Int64 = 15
├ seed::Int64 = 0
└ random_number_generator::Random.Xoshiro = Random.Xoshiro(0xd2a1432d702e0cee, 0x29cf22da6a5ba59f, 0x2b46aedb0982f47a, 0x6004ffca76790392, 0xc893148d1c1edd2b)
├ pres::SpeedyWeather.ZeroInitially = SpeedyWeather.ZeroInitially <: SpeedyWeather.AbstractInitialConditions

├ temp::SpeedyWeather.ZeroInitially = SpeedyWeather.ZeroInitially <: SpeedyWeather.AbstractInitialConditions

└ humid::SpeedyWeather.ZeroInitially = SpeedyWeather.ZeroInitially <: SpeedyWeather.AbstractInitialConditions


model.random_process
SpeedyWeather.NoRandomProcess <: SpeedyWeather.AbstractRandomProcess


model.tracers
Dict{Symbol, SpeedyWeather.Tracer}()

model.time_stepping
SpeedyWeather.Leapfrog{Float32} <: SpeedyWeather.AbstractTimeStepper
├ trunc::Int64 = 5
├ nsteps::Int64 = 2
├ Δt_at_T31::Dates.Second = 2400 seconds
├ radius::Float32 = 6.371e6
├ adjust_with_output::Bool = true
├ robert_filter::Float32 = 0.1
├ williams_filter::Float32 = 0.53
├ Δt_millisec::Dates.Millisecond = 3600000 milliseconds
├ Δt_sec::Float32 = 3600.0
└ Δt::Float32 = 0.0005650604

model.spectral_transform
SpectralTransform{Float32, SpeedyWeather.Architectures.CPU{KernelAbstractions.CPU}}:
├ Spectral:     T5, 7x6 LowerTriangularMatrix{Complex{Float32}}
├ Grid:         Field{Float32}, 8-ring SpeedyWeather.RingGrids.OctahedralGaussianGrid
├ Truncation:   dealiasing = 1.67 (linear)
├ Legendre:     Polynomials 1.33 KB, shortcut: linear
├ Architecture: SpeedyWeather.Architectures.CPU{KernelAbstractions.CPU}(KernelAbstractions.CPU(false))
└ Memory:       for 1 layers (1.54 KB)

model.implicit
SpeedyWeather.NoImplicit <: SpeedyWeather.AbstractImplicit


model.horizontal_diffusion
SpeedyWeather.HyperDiffusion{Float32, Matrix{Float32}} <: SpeedyWeather.AbstractHorizontalDiffusion
├ trunc::Int64 = 5
├ nlayers::Int64 = 1
├ power::Float32 = 4.0
├ time_scale::Dates.Second = 14400 seconds
├ time_scale_div::Dates.Second = 3600 seconds
├ resolution_scaling::Float32 = 1.0
├ power_stratosphere::Float32 = 2.0
├ tapering_σ::Float32 = 0.2
└── arrays: expl, impl, expl_div, impl_div

model.output
JLD2Output
├ status: active
├ write restart file: true (if active)
├ path: c:\Users\stefa\Desktop\CodePC\SpeedyWeatherEmulator.jl\data\raw_data\raw_data_T5_ndata48_IC1_ID_RH_wave\run_0001\output.jld2
└ frequency: 3600 seconds


model.callbacks
Dict{Symbol, SpeedyWeather.AbstractCallback}()

model.feedback
SpeedyWeather.Feedback <: AbstractFeedback
├ verbose::Bool = true
├ debug::Bool = true
├ output::Bool = true
├ id::String = 0001
├ run_path::String = c:\Users\stefa\Desktop\CodePC\SpeedyWeatherEmulator.jl\data\raw_data\raw_data_T5_ndata48_IC1_ID_RH_wave\run_0001
├ progress_meter::Progress = Progress <: ProgressMeter.AbstractProgress
├ n::Int64 = 1
├ start::Int64 = 0
├ barlen::Nothing = nothing
├ barglyphs::BarGlyphs = BarGlyphs('|', '█', '█', ' ', '|')
└ core::ProgressMeter.ProgressCore = ProgressMeter.ProgressCore(:green, "Weather is speedy: run 0001 ", 0.1, true, 0, Base.TTY(Base.Libc.WindowsRawSocket(0x0000000000000274) open, 0 bytes waiting), true, 1, 0, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 1519749365338)), 0, 1, false, 0, 1, 1.757165474937e9, 1.757165474937e9, 1.757165474937e9)
├ progress_txt::IOStream = IOStream()
└ nars_detected::Bool = false

