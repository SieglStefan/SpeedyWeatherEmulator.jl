var documenterSearchIndex = {"docs":
[{"location":"#SpeedyWeatherEmulator.jl","page":"Home","title":"SpeedyWeatherEmulator.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Ein Emulator für das barotrope SpeedyWeather-Modell mit neuronalen Netzen und Tools für Datenhandling, Training und Auswertung.","category":"page"},{"location":"#Inhalt","page":"Home","title":"Inhalt","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"man/quickstart.md\", \"man/theory.md\", \"man/api.md\"]\nDepth = 2","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"man/api/#Functions-and-Types","page":"Functions & Types","title":"Functions & Types","text":"","category":"section"},{"location":"man/api/#Core","page":"Functions & Types","title":"Core","text":"","category":"section"},{"location":"man/api/#SpeedyWeatherEmulator.SimPara","page":"Functions & Types","title":"SpeedyWeatherEmulator.SimPara","text":"SimPara\n\nContainer for core simulation parameters that define SpeedyWeather.jl data generation,      resulting data shape and storage name.\n\nFields\n\ntrunc::Int: Spectral truncation of the barotropic model (e.g. 5 for T5).\nn_data::Int: Number of stored data time steps after spin-up.\nn_ic::Int: Number of simulated initial conditions (independent runs).\nn_spinup::Int: Number of spin-up steps discarded before sampling.\nt_step::Real: Physical time step length.\ninitial_cond::Union{Nothing, Function}: Optional generator for initial conditions; if nothing, random ICs are used.\nid_key::String: Additional identifier to disambiguate saved datasets with identical trunc, n_data and n_ic.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#SpeedyWeatherEmulator.SimPara-Tuple{}","page":"Functions & Types","title":"SpeedyWeatherEmulator.SimPara","text":"SimPara(; trunc::Int,\n         n_data::Int,\n         n_ic::Int,\n         n_spinup::Int = 10,\n         t_step::Real = 1.0,\n         initial_cond::Union{Nothing, Function} = nothing,\n         id_key::String = \"\")\n\nConvenience constructor for SimPara.\n\nArguments\n\ntrunc::Int: Spectral truncation of the barotropic model (e.g. 5 for T5).\nn_data::Int: Number of stored data time steps after spin-up.\nn_ic::Int: Number of simulated initial conditions (independent runs).\nn_spinup::Int = 10: Number of spin-up steps discarded before sampling.\nt_step::Real = 1.0: Physical time step length.\ninitial_cond::Union{Nothing, Function}: Optional generator for initial conditions; if nothing, random ICs are used.\nid_key::String = \"\": Additional identifier to disambiguate saved datasets with identical (trunc, n_data, n_ic).\n\nReturns\n\n::SimPara: Container for simulation parameters that define the simulation and data storage.\n\nExamples\n\nsim_para = SimPara(trunc=5, n_data=50, n_ic=200, id_key=\"test-suite\")\n\n\n\n\n\n","category":"method"},{"location":"man/api/#SpeedyWeatherEmulator.calc_n_coeff-Tuple{}","page":"Functions & Types","title":"SpeedyWeatherEmulator.calc_n_coeff","text":"calc_n_coeff(; trunc::Int64)\n\nCalculate the number of complex spectral coefficients for a given spectral truncation.\n\nArguments\n\ntrunc::Int64: Spectral truncation of the barotropic model (e.g. 5 for T5).\n\nReturns\n\nn_coeff::Int64: Number of complex spectral coefficients (without splitting into real/imag parts).\n\n\n\n\n\n","category":"method"},{"location":"man/api/#SpeedyWeatherEmulator.is_coeff_zero-Tuple{Int64, Array{Float32, 3}}","page":"Functions & Types","title":"SpeedyWeatherEmulator.is_coeff_zero","text":"is_coeff_zero(i::Int64, data::Array{Float32, 3})\n\nChecks if a specific spectral coefficient - indexed i - is always zero in the simulation data sim_data.\n\nArguments\n\ni::Int64: Index of spectral coefficient.\ndata::Array{Float32, 3}: Spectral coefficients which are checked.\n\nReturns\n\nis_zero::Bool: Returns if they are all zero.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#IO","page":"Functions & Types","title":"IO","text":"","category":"section"},{"location":"man/api/#SpeedyWeatherEmulator.data_path-Tuple{SimPara}","page":"Functions & Types","title":"SpeedyWeatherEmulator.data_path","text":"data_path(sim_para::SimPara; type::String)\n\nCreates the folder or file path for storing data associated with sim_para.\n\nArguments\n\nsim_para::SimPara: Simulation parameters (used to build unique name).\ntype::String: Data type; \"raw_data\", \"sim_data\", \"emulator\" or \"losses\".\n\nReturns\n\n::String: Absolute normalized path to the storage location.\n\nNaming Convention\n\nFor raw data: /data/raw_data/T<trunc>_ndata<n_data>_IC<n_ic>_ID<id_key>/\nFor all other types: /data/<type>/<type>_T<trunc>_ndata<n_data>_IC<n_ic>_ID<id_key>.jld2\n\nExamples\n\nsim_para = SimPara(trunc=5, n_data=50, n_ic=200, id_key=\"demo\")\ndata_path(sim_para; type=\"sim_data\")\n# → \".../data/sim_data/sim_data_T5_ndata50_IC200_IDdemo.jld2\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#SpeedyWeatherEmulator.delete_data-Tuple{SimPara}","page":"Functions & Types","title":"SpeedyWeatherEmulator.delete_data","text":"delete_data(sim_para::SimPara; type::String, overwrite::Bool=false)\n\nDelete existing data of type \"raw_data\", \"sim_data\", \"emulator\" or \"losses\"\n\nDescription\n\nChecks whether the path already exists.\nIf overwrite=true: deletes existing content and creates a new folder if type = \"raw_data\".\nIf overwrite=false: keeps existing data untouched and sets cancel_sim=true to cancel current process.\n\nArguments\n\nsim_para::SimPara: Simulation parameters (used for identifying data).\ntype::String: Data type; \"raw_data\", \"sim_data\", \"emulator\", \"losses\".\noverwrite::Bool = false: Control overwrite behavior.\n\nReturns\n\npath::String: Target folder/file path.\ncancel_sim::Bool: True if the current process must be stopped because data is not allowed to be overwritten.\n\nNotes\n\nFor \"raw_data\", creates a directory tree.\nFor other types, returns the target .jld2 path (no folder created).\n\nExamples\n\nsim_para = SimPara(trunc=5, n_data=50, n_ic=200, id_key=\"test\")\ndelete_data(sim_para; type=\"sim_data\")\n\n\n\n\n\n","category":"method"},{"location":"man/api/#SpeedyWeatherEmulator.load_data-Tuple{SimPara}","page":"Functions & Types","title":"SpeedyWeatherEmulator.load_data","text":"load_data(sim_para::SimPara; type::String)\n\nLoad previously saved data of a given type using the defining simulation parameters.\n\nArguments\n\nsim_para::SimPara: Simulation parameters; determines the folder/file name.\ntype::String: Dataset type, e.g. \"sim_data\", \"emulator\", \"losses\".\n\nReturns\n\n::Union{SimData, Emulator, Losses}: The saved object stored in the JLD2 file under the key \"data\".   (For example a SimData, Emulator, or Losses object.)\n\nNotes\n\nload_data is intended for JLD2-based single-file storage types.\n\nExamples\n\nsim_para = SimPara(trunc=5, n_data=50, n_ic=200)\nsim_data_loaded = load_data(sim_para; type=\"sim_data\")\n\n\n\n\n\n","category":"method"},{"location":"man/api/#SpeedyWeatherEmulator.save_data-Tuple{Union{Emulator, Losses, SimData}}","page":"Functions & Types","title":"SpeedyWeatherEmulator.save_data","text":"save_data(data::Union{SimData, Emulator, Losses}; overwrite::Bool=false)\n\nSave simulation- or training-related data (SimData, Emulator, Losses) using JLD2.\n\nDescription\n\nBuilds a consistent file/folder path from the associated SimPara via data_path for saving data.\nPrevents overwriting unless overwrite=true.\nUses JLD2 to serialize the given data.\n\nArguments\n\ndata::Union{SimData, Emulator, Losses}: The container to save.   Must have a field sim_para::SimPara.\noverwrite::Bool = false: If true, existing file/folder is deleted before writing.\n\nReturns\n\nnothing: Data is written to the file system.\n\nNotes\n\nFor raw_data: Creates a directory tree with subfolders run_0001, run_0002, ….\nFor all other types: Saves to a single .jld2 file.\n\nExamples\n\nsim_para = SimPara(trunc=5, n_data=50, n_ic=200, id_key=\"demo\")\nsim_data = SimData(sim_para)\nsave_data(sim_data; type=\"sim_data\", overwrite=true)\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Data","page":"Functions & Types","title":"Data","text":"","category":"section"},{"location":"man/api/#SpeedyWeatherEmulator.generate_raw_data-Tuple{SimPara}","page":"Functions & Types","title":"SpeedyWeatherEmulator.generate_raw_data","text":"generate_raw_data(sim_para::SimPara; overwrite::Bool=false)\n\nGenerate raw vorticity data with SpeedyWeather.jl based on the given simulation parameters.\n\nDescription\n\nPrepares a raw-data folder using prepare_folder.\nRuns the barotropic model with spectral truncation sim_para.trunc and time step sim_para.t_step.\nFor each initial condition (IC), creates a new run subfolder and stores the simulated vorticity.\nIf overwrite=false and data already exist, generation is canceled.\n\nArguments\n\nsim_para::SimPara: Container for parameters that define the simulation and data storage.\noverwrite::Bool = false: If true, delete existing data and regenerate.     If false, aborts safely when data already exist.\n\nReturns\n\nnothing: Data is written in the folder data_path(sim_para; type=\"raw_data\").\n\nNotes\n\nSpin-up steps (n_spinup) are run but not stored in later SimData.\nIf sim_para.initial_cond is not nothing, this function applies the given IC via set!(sim, vor=…).\nSometimes overwriting raw_data files is not possible because the folders are open/busy.   Data Generation is then canceled.\nOnly prognostic variables are stored.\n\nExamples\n\nsim_para = SimPara(trunc=5, n_data=50, n_ic=200, id_key=\"123\")\ngenerate_raw_data(sim_para; overwrite=true)\n# → creates data/raw_data/raw_data_T5_ndata50_IC200_ID123/run_0001/output.jld2, ..., run_0200/output.jld2\n\n\n\n\n\n","category":"method"},{"location":"man/api/#SpeedyWeatherEmulator.SimData","page":"Functions & Types","title":"SpeedyWeatherEmulator.SimData","text":"SimData\n\nContainer for SpeedyWeather.jl vorticity data together with the simulation parameters.\n\nFields\n\nsim_para::SimPara: Container for parameters that define the simulation and data storage.\ndata::Array{Float32,3}: Vorticity tensor with shape (2 * n_coeff, n_data, n_ic)       where n_coeff = calc_n_coeff(sim_para.trunc).        The first n_coeff rows store the real parts,        the next n_coeff rows the imaginary parts of the complex spectral coefficients.\n\nNotes\n\nThe layout is column-major and optimized for contiguous slicing over time and ICs.\nDimensions are inferred from sim_para and remain consistent across the pipeline.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#SpeedyWeatherEmulator.SimData-Tuple{SimPara}","page":"Functions & Types","title":"SpeedyWeatherEmulator.SimData","text":"SimData(sim_para::SimPara)\n\nConstruct a SimData container by loading previously generated raw data and extracting the spectral vorticity coefficients time series into a consistent tensor layout.\n\nThis constructor:\n\ninfers (n_coeff, n_data, n_ic) from sim_para,\nallocates the target array data::Array{Float32,3} with shape (2 * n_coeff, n_data, n_ic),\niterates over runs ic = 1:n_ic, loads output.jld2, and reads output_vector,\nfor each stored step step ∈ { n_spinup, …, n_spinup + n_data - 1 }:\nextracts the spectral vorticity vor,\nwrites real(vor) to rows 1:n_coeff and imag(vor) to rows n_coeff+1:2n_coeff,\nstores at time index step + 1 - n_spinup.\n\nArguments\n\nsim_para::SimPara: Container for parameters that define the simulation and data storage;    must match the generated raw data on disk.\n\nReturns\n\n::SimData: Container holding simulation data and corresponding sim. parameters.\n\nPreconditions\n\nExpects raw data in data_path(sim_para; type=\"raw_data\") with per-run subfolders   run_0001, run_0002, … each containing output.jld2 with an output_vector.\nRaw data should be created beforehand via generate_raw_data(sim_para; overwrite=false).\n\nNotes\n\nThe leading factor 2 in the first dimension stacks real and imaginary parts.\nThe time indexing uses step + 1 - n_spinup to map stored steps to 1:n_data.\n\nExamples\n\nsim_para = SimPara(trunc=5, n_data=50, n_ic=200)\n# after generate_raw_data(sim_para) has been called:\nsim_data = SimData(sim_para)\n# inspect shapes\nsize(sim_data.data)  # (2*n_coeff, n_data, n_ic)\n\n\n\n\n\n","category":"method"},{"location":"man/api/#SpeedyWeatherEmulator.DataPairs","page":"Functions & Types","title":"SpeedyWeatherEmulator.DataPairs","text":"DataPairs(x_train, y_train, x_valid, y_valid, x_test, y_test)\n\nContainer for paired data samples (x,y) = (vor(t), vor(t+Δt)), already split into training, validation and test sets.\n\nFields\n\nx_train::Matrix{Float32}: Training inputs vor(t).\ny_train::Matrix{Float32}: Training targets vor(t+Δt).\nx_valid::Matrix{Float32}: Validation inputs vor(t).\ny_valid::Matrix{Float32}: Validation targets vor(t+Δt).\nx_test::Matrix{Float32}: Test inputs vor(t).\ny_test::Matrix{Float32}: Test targets vor(t+Δt).\n\nNotes\n\nAll matrices have the same row dimension = 2 * n_coeff.\nColumns index over independent time-pairs and ICs.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#SpeedyWeatherEmulator.FormattedData","page":"Functions & Types","title":"SpeedyWeatherEmulator.FormattedData","text":"FormattedData\n\nContainer for formatted data, i.e. paired vorticity samples (x,y) = (vor(t), vor(t+Δt)).\n\nFields\n\nsim_para::SimPara: Container for parameters that define the simulation and data storage.\ndata_pairs::DataPairs: The split and paired data.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#SpeedyWeatherEmulator.FormattedData-Tuple{SimData}","page":"Functions & Types","title":"SpeedyWeatherEmulator.FormattedData","text":"FormattedData(sim_data::SimData; splits=(train=0.7, valid=0.15, test=0.15))\n\nConstruct FormattedData directly from SimData by pairing consecutive time steps     and splitting them into train/validation/test sets.\n\nDescription\n\nBuilds (x,y) pairs as\nx = vor(t) = spectral vorticity state at time t,\ny = vor(t+Δt) at the next time step.\nReshapes all ICs and times into column vectors.\nSplits the resulting pairs according to the fractions in splits.\n\nArguments\n\nsim_data::SimData: Container holding simulation data and corresponding sim. parameters.\nsplits::NamedTuple: Fractions for train-, valid- and test-set.     Default = (0.7, 0.15, 0.15).\n\nReturns\n\n::FormattedData: Container holding formatted (paired) simulation data and corresponding sim. parametrs.\n\nNotes\n\nThe number of total pairs is (n_data - 1) * `n_ic.\nSplits are normalized so that train + valid + test = 1.\n\nExamples\n\nfd = FormattedData(sim_data; splits=(train=0.7, valid=0.2, test=0.1))\nsize(fd.data_pairs.x_train)  # (2*n_coeff, n_train)\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Emulator","page":"Functions & Types","title":"Emulator","text":"","category":"section"},{"location":"man/api/#SpeedyWeatherEmulator.ZscorePara","page":"Functions & Types","title":"SpeedyWeatherEmulator.ZscorePara","text":"ZscorePara(μ::Vector{Float32}, σ::Vector{Float32})\n\nContainer for the parameters of a Z-score transformation.\n\nFields\n\nμ::Vector{Float32}: Mean for each coefficient across samples.\nσ::Vector{Float32}: Std for each coefficient across samples\n\nNotes\n\nTypically computed from the training set only to avoid data leakage.\nFor each coefficient indexed i: zi = (xi - μi) / σi\n\n\n\n\n\n","category":"type"},{"location":"man/api/#SpeedyWeatherEmulator.inv_zscore-Tuple{Array{Float32}, ZscorePara}","page":"Functions & Types","title":"SpeedyWeatherEmulator.inv_zscore","text":"inv_zscore(x::Array{Float32}, stats::ZscorePara)\n\nInverse Z-score transformation (restore original scale).\n\nArguments\n\nx::Array{Float32}: Z-score normalized data.\nstats::ZscorePara: Parameters with mean μ and std σ.\n\nReturns\n\n::Array{Float32}: Data rescaled back to the original distribution.\n\nExamples\n\nstats = ZscorePara([0.0f0, 1.0f0], [1.0f0, 2.0f0])\nz = Float32[0 -0.5; 1 0.5]\nx = inv_zscore(z, stats)\n\n\n\n\n\n","category":"method"},{"location":"man/api/#SpeedyWeatherEmulator.zscore-Tuple{Array{Float32}, ZscorePara}","page":"Functions & Types","title":"SpeedyWeatherEmulator.zscore","text":"zscore(x, stats::ZscorePara)\n\nApply a Z-score transformation to data x using the parameters in stats.\n\nArguments\n\nx::AbstractArray: Input data (rows = coefficients, columns = samples).\nstats::ZscorePara: Parameters with mean μ and std σ.\n\nReturns\n\n::Array{Float32}: Z-score normalized data.\n\nNotes\n\nEach coefficient is transformed independently.\nA small eps(Float32) is added to σ to avoid division by zero.\n\nExamples\n\nstats = ZscorePara([0.0f0, 1.0f0], [1.0f0, 2.0f0])\nx = Float32[0 2; 1 3]\nz = zscore(x, stats)\n\n\n\n\n\n","category":"method"},{"location":"man/api/#SpeedyWeatherEmulator.Emulator","page":"Functions & Types","title":"SpeedyWeatherEmulator.Emulator","text":"Emulator\n\nContainer for a trained (or in-progress) neural network emulator.\n\nFields\n\nsim_para::SimPara: Simulation parameters of the dataset used for training, validation and testing.\nchain::Flux.Chain: Neural network architecture and weights.\nzscore_para::ZscorePara: Normalization parameters (mean/std of training set).\n\n\n\n\n\n","category":"type"},{"location":"man/api/#SpeedyWeatherEmulator.Emulator-Tuple{NeuralNetwork, ZscorePara, SimPara}","page":"Functions & Types","title":"SpeedyWeatherEmulator.Emulator","text":"Emulator(nn::NeuralNetwork, zscore_para::ZscorePara, sim_para::SimPara)\n\nConstructor for an Emulator. Builds a feed-forward network with ReLU activations according to the given NeuralNetwork specs.\n\nArguments\n\nnn::NeuralNetwork: Parameters of the architecture (layer sizes).\nzscore_para::ZscorePara: Normalization parameters of the training data.\nsim_para::SimPara: Simulation parameters used for generating the training data.\n\nReturns\n\n::Emulator: A wrapped Flux model with normalization metadata.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#SpeedyWeatherEmulator.Emulator-Tuple{VecOrMat{Float32}}","page":"Functions & Types","title":"SpeedyWeatherEmulator.Emulator","text":"(m::Emulator)(x::Union{Vector{Float32}, Matrix{Float32}})\n\nConvenience call overload. Apply the trained emulator to spectral coefficients at time t to predict coefficients at t + Δt.\n\nArguments\n\nx::Vector{Float32}: Spectral coefficients of vorticity at time t (size = 2 * n_coeff).\nx::Matrix{Float32}: Multiple states, each column a spectral coefficients vector at time t (size = (2 * n_coeff, N)).\n\nReturns\n\n::Vector{Float32}: Emulator prediction for a single state at t + Δt (same size as input vector).\n::Matrix{Float32}: Emulator predictions for multiple states, one prediction per column (same shape as input matrix).\n\n\n\n\n\n","category":"method"},{"location":"man/api/#SpeedyWeatherEmulator.Losses","page":"Functions & Types","title":"SpeedyWeatherEmulator.Losses","text":"Losses\n\nContainer for logging training, validation, and test losses.\n\nFields\n\nsim_para::SimPara: Simulation parameters of the dataset used.\ntrain::Vector{Float32}: Training loss per batch.\nvalid::Vector{Float32}: Validation loss per batch.\ntest::Vector{Float32}: Test loss per batch.\nbpe_train::Int64: Batches per epoch (training set).\nbpe_valid::Int64: Batches per epoch (validation set).\nbpe_test::Int64: Batches per epoch (test set).\n\n\n\n\n\n","category":"type"},{"location":"man/api/#SpeedyWeatherEmulator.Losses-Tuple{SimPara, Int64, Int64}","page":"Functions & Types","title":"SpeedyWeatherEmulator.Losses","text":"Losses(sim_para::SimPara, bpe_train::Int64, bpe_valid::Int64)\n\nConstructor for an empty Losses container.\n\nArguments\n\nsim_para::SimPara: Simulation parameters of the dataset used.\nbpe_train::Int64: Batches per epoch (training set).\nbpe_valid::Int64: Batches per epoch (validation set).\n\nReturns\n\n::Losses: Initialized container with empty loss vectors and bpe_test = 0.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#SpeedyWeatherEmulator.NeuralNetwork","page":"Functions & Types","title":"SpeedyWeatherEmulator.NeuralNetwork","text":"NeuralNetwork\n\nContainer for the layer dimensions of a neural network.\n\nFields\n\nio_dim::Int64: Dimension of the input and output layer (e.g. number of spectral coefficients).\nhidden_dim::Int64: Dimension of each hidden layer.\nn_hidden::Int64: Number of hidden layers.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#SpeedyWeatherEmulator.NeuralNetwork-Tuple{}","page":"Functions & Types","title":"SpeedyWeatherEmulator.NeuralNetwork","text":"NeuralNetwork(; io_dim::Int64=54, hidden_dim::Int64=128, n_hidden::Int64=1)\n\nConvenience constructor for NeuralNetwork.\n\nArguments\n\nio_dim::Int64: Dimension of the input and output layer (e.g. number of spectral coefficients).\nhidden_dim::Int64: Dimension of each hidden layer.\nn_hidden::Int64: Number of hidden layers.\n\nReturns\n\n::NeuralNetwork: Parameter container.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#SpeedyWeatherEmulator.compare_emulator-Tuple{Emulator}","page":"Functions & Types","title":"SpeedyWeatherEmulator.compare_emulator","text":"compare_emulator(em::Emulator; \n                 x_test::Matrix{Float32},\n                 y_test::Matrix{Float32},\n                 all_coeff::Bool=false)\n\nCompare emulator predictions against SpeedyWeather.jl reference data.\n\nDescription\n\nApplies the emulator em to test inputs x_test and compares results to y_test.\nComputes mean relative error per spectral coefficient:    relerri = |ŷi - yi| / (|y_i| + ε) * 100.\nPrints mean relative error (all coefficients averaged) and maximum mean relative error.\nOptionally prints coefficient-wise relative errors.\n\nArguments\n\nem::Emulator: Trained emulator to evaluate.\nx_test::Matrix{Float32}: Test inputs (vorticity coefficients at t) of form (2 * n_coeff, N).\ny_test::Matrix{Float32}: Reference outputs from SpeedyWeather.jl (at t+Δt) of form (2 * n_coeff, N).\nall_coeff::Bool=false: If true, print relative error for each coefficient.\n\nReturns\n\nnothing: Results are printed to STDOUT.\n\nNotes\n\nSome coefficients in SpeedyWeather.jl are structurally zero → flagged in output.\nErrors are reported in percent [%].\n\nExamples\n\nemu, losses = train_emulator(nn, fd)\ncompare_emulator(emu; \n    x_test=fd.data_pairs.x_test,\n    y_test=fd.data_pairs.y_test,\n    all_coeff=true)\n\n\n\n\n\n","category":"method"},{"location":"man/api/#SpeedyWeatherEmulator.train_emulator-Tuple{NeuralNetwork, FormattedData}","page":"Functions & Types","title":"SpeedyWeatherEmulator.train_emulator","text":"train_emulator(nn::NeuralNetwork, fd::FormattedData; \n               batchsize::Int=32, n_epochs::Int=300, η0::Real=0.001)\n\nTrain an emulator (neural network) with the given architecture and data.\n\nDescription\n\nComputes Z-score parameters from the training set.\nConstructs an Emulator with the given NeuralNetwork.\nApplies Z-score normalization to training and validation pairs.\nTrains the network using Adam with initial learning rate η0.\nHalves the learning rate every 30 epochs.\nLogs training and validation losses.\nCalls compare_emulator on the test set after training.\n\nArguments\n\nnn::NeuralNetwork: Defines the structure (layer sizes) of the neural network.\nfd::FormattedData: Formatted dataset with train/valid/test splits of size (2*n_coeff, N).\nbatchsize::Int=32: Training batch size.\nn_epochs::Int=300: Number of training epochs.\nη0::Real=0.001: Initial learning rate.\n\nReturns\n\nemu::Emulator: Trained emulator model (Flux chain + normalization).\nlosses::Losses: Recorded training/validation losses and batches per epoch.\n\nNotes\n\nTest set evaluation is not part of the training loop; only compare_emulator is called at the end.\nNormalization statistics are always computed from the training set to avoid leakage.\n\nExamples\n\nnn = NeuralNetwork(io_dim=54, hidden_dim=128, n_hidden=2)\nfd = FormattedData(sim_data; splits=(train=0.7, valid=0.2, test=0.1))\nemu, losses = train_emulator(nn, fd; batchsize=64, n_epochs=100, η0=0.0005)\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Evaluation","page":"Functions & Types","title":"Evaluation","text":"","category":"section"},{"location":"man/api/#SpeedyWeatherEmulator.plot_forecast_test-Tuple{SimData}","page":"Functions & Types","title":"SpeedyWeatherEmulator.plot_forecast_test","text":"plot_forecast_test(sim_data::SimData)\n\nPlots the spectral coefficients to test the SpeedyWeather.jl forecast quality.\n\nPlots the mean spectral coefficients (of the first 50 initial conditions) in the time interval      [t_spinup, t_max] = [t_spinup, t_spinup + (n_data-1) * t_step] to test, if the SpeedyWeather.jl simulation     defined by sim_data.sim_para makes sense.\n\nIf the spectral coefficients strongly diverge, n_data or t_step is probably too large.\nIf an initial condition is given, t_spinup is ignored. Therefore, the time interval [0, (n_data-1) * t_step] is used.\n\nArguments\n\nsim_data::SimData: Contains the spectral coefficients plotted (only a part of sim_data is plotted).\n\nReturns\n\np::Plots.Plot: Plot of the mean spectral coefficents in the interval [t_spinup, t_max].\n\n\n\n\n\n","category":"method"},{"location":"man/api/#SpeedyWeatherEmulator.plot_losses-Tuple{Losses}","page":"Functions & Types","title":"SpeedyWeatherEmulator.plot_losses","text":"plot_losses(losses::Losses)\n\nPlot training and validation losses stored in a Losses container.\n\nDescription\n\nPlots training loss per batch (log-log scale).\nAdds epoch-averaged training and validation loss curves.\nReturns a Plots.Plot object for further customization or saving.\n\nArguments\n\nlosses::Losses: Container with training/validation loss history and number of batches per epoch.\n\nReturns\n\np::Plots.Plot: Combined plot of training and validation losses.\n\nNotes\n\nTraining batches per epoch = losses.bpe_train.\nValidation batches per epoch = losses.bpe_valid.\nNumber of epochs is inferred as length(losses.train) / bpe_train.\n\nExamples\n\nemu, losses = train_emulator(nn, fd)\np = plot_losses(losses)\ndisplay(p)  \n\n\n\n\n\n","category":"method"},{"location":"man/api/#SpeedyWeatherEmulator.plot_heatmap-Tuple{Vector{Float32}}","page":"Functions & Types","title":"SpeedyWeatherEmulator.plot_heatmap","text":"plot_heatmap(vec::Vector{Float32}; trunc::Int64, title::String=\"\")\n\nPlot a heatmap of a vorticity field reconstructed from a spectral coefficient vector.\n\nDescription\n\nConverts spectral coefficients in vector form into a LowerTriangularMatrix.\nTransforms this into a grid suitable for plotting.\nDisplays the grid as a heatmap using CairoMakie.\n\nArguments\n\nvec::Vector{Float32}: Spectral coefficient vector (real/imag stacked).\ntrunc::Int64: Spectral truncation of the model (e.g. 5 for T5).\ntitle::String=\"\": Optional title for the plot.\n\nReturns\n\n::::CairoMakie.Plot: Heatmap figure object.\n\nExamples\n\nvec = rand(Float32, 54)   # random spectral coeffs for trunc=5\nfig = plot_heatmap(vec; trunc=5, title=\"Vorticity field\")\ndisplay(fig)\n\n\n\n\n\n","category":"method"},{"location":"man/api/#SpeedyWeatherEmulator.vec_to_ltm-Tuple{Vector{Float32}, Int64}","page":"Functions & Types","title":"SpeedyWeatherEmulator.vec_to_ltm","text":"vec_to_ltm(vec::Vector{Float32}, trunc::Int64)\n\nConvert a spectral coefficient vector into a LowerTriangularMatrix representation.\n\nDescription\n\nInterprets the coefficient vector as complex spectral coefficients.\nPlaces them into a triangular matrix layout consistent with SpeedyWeather.jl.\n\nArguments\n\nvec::Vector{Float32}: Vector of spectral coefficients.\ntrunc::Int64: Spectral truncation of the model (e.g. 5 for T5).\n\nReturns\n\nL::LowerTriangularMatrix{ComplexF32}: Complex spectral coefficient matrix.\n\nNotes\n\nFor trunc=5, produces an N=7 x M=6 LowerTriangularMatrix with 27 entries.\nvec is expected to be structured as [Re(c1), …, Re(cncoeff), Im(c1), …, Im(cncoeff)].\n\nExamples\n\nn = calc_n_coeff(trunc=5)\nvec = rand(Float32, 2*n)\nL = vec_to_ltm(vec, 5)\n\n\n\n\n\n","category":"method"},{"location":"man/quickstart/#Quick-installation","page":"Quick installation","title":"Quick installation","text":"","category":"section"},{"location":"man/quickstart/#Installation","page":"Quick installation","title":"Installation","text":"","category":"section"},{"location":"man/quickstart/","page":"Quick installation","title":"Quick installation","text":"using Pkg\nPkg.add(url=\"https://github.com/SieglStefan/SpeedyWeatherEmulator.jl\")","category":"page"}]
}
