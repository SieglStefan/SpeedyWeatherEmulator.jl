using SpeedyWeatherEmulator
using Plots, CairoMakie

# Fix the seed for reproducibility
Random.seed!(1234)



### BASIC WORKFLOW

# Definie simulation parameters
sim_para = SimPara(trunc=5, n_data=48, n_ic=300, id_key="_basic_workflow")

# Generate raw simulation data
generate_raw_data(sim_para)

# Create formatted simulation data
sim_data = SimData(sim_para)
fd = FormattedData(sim_data)

# Define neural network and train the emulator
nn = NeuralNetwork()
em, losses = train_emulator(nn, fd)

# Plot and save the loss curve for inspection
p = plot_losses(losses)
display(p)
#Plots.savefig(p, joinpath(@__DIR__, "plots", "losses_BWF.pdf"))

# Define vorticity for comparison
vor0 = sim_data.data[:,20,1]
vorSW = sim_data.data[:,23,1]
vorEM = em(em(em(vor0)))

# Plot and save vorticity heatmaps
p1 = plot_heatmap(vor0, trunc=5, title="Initial Vorticity vor0")
p2 = plot_heatmap(vorSW, trunc=5, title="Real SpeedyWeather.jl Vorticity vorSW")
p3 = plot_heatmap(vorEM, trunc=5, title="Predicted Emulator Vorticity vorEM")

#CairoMakie.save(joinpath(@__DIR__, "plots", "vor0_BWF.png"), p1)
#CairoMakie.save(joinpath(@__DIR__, "plots", "vorSW_BWF.png"), p2)
#CairoMakie.save(joinpath(@__DIR__, "plots", "vorEM_BWF.png"), p3)



### REST

## Loss Curves
emu, losses = train_emulator(nn, fd)
plot_losses(losses; title="Training history (T5)")

## Vorticity Heatmaps
vec = rand(Float32, 54)     # random coeffs for trunc=5
plot_heatmap(vec; trunc=5, title="Random vorticity field")
