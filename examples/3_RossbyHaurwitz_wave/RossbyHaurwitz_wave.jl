using SpeedyWeatherEmulator
using Random
using Plots, CairoMakie


### This Code is similar to "long_forecast_quaility.jl", but still has some major differences


### Prepare emulator evaluation


## Prepare emulator

# Fix the seed for reproducibility
Random.seed!(1234)

# Define simulation parameters and load/format simulation data generated by "generate_data.jl"
#   (we assume raw_data already exists, created by "1_hyperparameter_optimization")
const TRUNC = 5
const N_DATA = 48
const N_IC = 1000

sim_para_loading = SimPara(trunc=TRUNC, n_data=N_DATA, n_ic=N_IC)
sim_data = load_data(SimData, sim_para_loading)
fd = FormattedData(sim_data)

# Loading the best emulator from the hyperparameter optimiaztion
sim_para_emulator = SimPara(trunc=TRUNC, n_data=N_DATA, n_ic=N_IC, id_key="_hyperpara_L1_W640")
em = load_data(Emulator, sim_para_emulator)


## Prepare test data

# Define Rossby-Haurwitz wave
m = 4
ω = 7.848e-6
K = 7.848e-6

ζ(λ, θ, σ) = 2ω*sind(θ) - K*sind(θ)*cosd(θ)^m*(m^2 + 3m + 2)*cosd(m*λ)

# Define test data
sim_para_RH = SimPara(trunc=5, n_data=48, n_ic=1, initial_cond=ζ, id_key="_RH_wave", n_spinup=0)
generate_raw_data(sim_para_RH)
sim_data_RH = SimData(sim_para_RH)
fd_RH = FormattedData(sim_data_RH, splits=(train=0, valid=0, test=1))


## Calculate rel. errors

# Define container for rel. errors for different forecast lengths
err_vec = zeros(N_DATA)             # rel. errors of trained emulator
err_vec0 = zeros(N_DATA)            # rel. errors of idendity emulator (em(vor) = vor)


# Calculate the rel. errors 
for steps in 1:N_DATA
    err_vec[steps] = compare_emulator(  em,
                                        x_test=fd_RH.data_pairs.x_test,
                                        y_test=fd_RH.data_pairs.y_test,
                                        n_it=steps)
    err_vec0[steps] = compare_emulator( em,
                                        x_test=fd_RH.data_pairs.x_test,
                                        y_test=fd_RH.data_pairs.y_test,
                                        n_it=steps,
                                        id_em=true)      # identy emulator (em(vor) = vor)
end



### Plots of rel. errros


# Plot comparing the trained emulator and the identiy emulator on log-axes
p1 = Plots.scatter( [err_vec, err_vec0];
                    label=["Emulator" "Identity"],
                    title="Emulator Comparison to Identiy",
                    xlabel="Forecast length / h",
                    ylabel="Rel. forecast error / %",                   
                    yscale=:log10, 
                    yticks = ([10,100,1000], ["10", "10²", "10³"]),
                    xticks = ([1,3,6,12,24,48], ["1", "3", "6", "12", "24", "48"]),
                    titlefont=font(18),   # Titelgröße
                    guidefont=13,                       # axis title size
                    tickfont=11,                        # tick size
                    legendfontsize=11,                  # legend size
                    markersize=5,                       # marker size
                    legend=:bottomright)

# Display and save plots
display(p1)
Plots.savefig(p1, joinpath(@__DIR__, "plots", "long_forecast_RH.pdf"))


### Heatmap plots for comparison

# Define the time horizons for comparison
horizons = [1, 6, 24, 48]


# Loop for different time horizons
for h in horizons
    # Initial vorticity
    vor0 = sim_data_RH.data[:, 1, 1]

    # Target (SpeedyWeather.jl) and emulated vorticity
    vor_sw = sim_data_RH.data[:, h, 1]
    vor_em = vor0

    for _ in 1:h
        vor_em = em(vor_em)
    end

    # Create heatmap plots
    colorrange = (-5e-5, +5e-5)
    fig_sw = plot_heatmap(vor_sw, trunc=5, title="", range=colorrange)
    fig_em = plot_heatmap(vor_em, trunc=5, title="", range=colorrange)

    display(fig_sw)
    display(fig_em)

    # Save the plots
    CairoMakie.save(joinpath(@__DIR__, "plots", "sw_$h.pdf"), fig_sw)
    CairoMakie.save(joinpath(@__DIR__, "plots", "em_$h.pdf"), fig_em)
end
