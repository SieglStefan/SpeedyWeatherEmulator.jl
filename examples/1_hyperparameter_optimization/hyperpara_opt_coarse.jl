using SpeedyWeatherEmulator


# Fix the seed for reproducibility
Random.seed!(1234)


# Define simulation parameters and load/format simulation data generated by "generate_data.jl"
const TRUNC = 5
const N_DATA = 48
const N_IC = 1000

sim_para_loading = SimPara(trunc=TRUNC, n_data=N_DATA, n_ic=N_IC)
sim_data = load_data(SimData, sim_para_loading)
fd = FormattedData(sim_data)

# Define the parameters for the coarse hyperparameter optimization
L_list = [1,2,3]                        # number of hidden layers
W_list_coarse = [64, 128, 256, 512]     # number of neurons per hidden layer


# Run the simulation for only 1 epoch to warm-up (first run always takes longer)
nn_warmup = NeuralNetwork(io_dim=2*calc_n_coeff(trunc=TRUNC),
                          hidden_dim=8,
                          n_hidden=1)

_, _ = train_emulator(nn_warmup, fd; n_epochs=1)


# Now train the emulator with different coarse hyperparameter
for L in L_list, W in W_list_coarse

    # Define simulation parameters for specific hyperparameter
    id = "_hyperpara_L$(L)_W$(W)"
    sim_para = SimPara(trunc=TRUNC, n_data=N_DATA, n_ic=N_IC, id_key=id)

    # Define neural network and train the emulator
    nn = NeuralNetwork( io_dim=2*calc_n_coeff(trunc=TRUNC),
                        hidden_dim = W,
                        n_hidden = L)

    em, losses = train_emulator(nn, fd; sim_para=sim_para)

    # Save losses and data for later evaluation in "hyperpara_opt_coarse_eval.jl"
    save_data(em)
    save_data(losses)
end