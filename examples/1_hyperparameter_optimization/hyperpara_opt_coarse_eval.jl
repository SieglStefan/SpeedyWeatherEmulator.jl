using SpeedyWeatherEmulator
using Plots, Measures



### Prepare emulator evaluation

# Define simulation parameters and load/format simulation data generated by "generate_data.jl"
const TRUNC = 5
const N_DATA = 48
const N_IC = 1000

sim_para_loading = SimPara(trunc=TRUNC, n_data=N_DATA, n_ic=N_IC)
sim_data = load_data(SimData, sim_para_loading)
fd = FormattedData(sim_data)

# Define the parameters for the coarse hyperparameter optimization
L_list = [1,2,3]                        # number of hidden layers
W_list_coarse = [64, 128, 256, 512]     # number of neurons per hidden layer

# Calculate number of spectral coeff.
d = 2*calc_n_coeff(trunc=TRUNC)                                

# Calculate the overall number of parameters of the neural network
n_params(d, W, L) = (d*W + W) + (L-1)*(W*W + W) + (W*d + d)

# Define dict. for better accessing rel. error and number of network parameters
plot_data = Dict{Tuple{Int,Int}, NamedTuple}()                     

# Define comparing time horizons
horizons = [1, 6, 12, 24]


# Fill the data dict. for all coarse hyperparameter
for L in L_list, W in W_list_coarse

    # Define simulation parameters for specific hyperparameter
    id = "_hyperpara_L$(L)_W$(W)"
    sim_para = SimPara(trunc=TRUNC, n_data=N_DATA, n_ic=N_IC, id_key=id)

    # Load the specific emulator (generated by "hyperpara_opt_coarse.jl")
    em = load_data(Emulator, sim_para)

    # Define container for rel. errors for different forecast lengths
    err_vec = zeros(N_DATA)

    # Compare the emulator for different forecast lengths
    for steps in horizons
        err_vec[steps] = compare_emulator(  em,
                                            x_test=fd.data_pairs.x_valid,
                                            y_test=fd.data_pairs.y_valid,
                                            n_it=steps)

    end

    # Initialize the dict.
    plot_data[(L,W)] = (err=err_vec, params=n_params(d, W, L))
end



### Emulator evaluation (plots)

## Plot the rel. error to the number of neural network parameters
# Define compared forecast lengths and marker symbols
marker_shapes = Dict(1=>:circle, 2=>:square, 3=>:diamond)

# Define empty plot
plots = Plots.Plot[]

# Generate different subplots
for h in horizons
    p = Plots.plot( xlabel="Number of parameters", 
                    ylabel="Relative error / %", 
                    title="horizon = $(h)h", 
                    titlefontsize=18)                   # subtitle size

    for L in L_list 
        xs = [plot_data[(L,W)].params for W in W_list_coarse]
        ys = [plot_data[(L,W)].err[h] for W in W_list_coarse]
        
        Plots.scatter!(p, xs, ys; 
                        markershape=marker_shapes[L], 
                        label="L = $L", 
                        markersize=8)                   # marker size
    end
    push!(plots, p)
end

# Combine subplots to a single plot
p = Plots.plot(plots...;  layout=(2,2), 
                    plot_title="Results of Coarse Hyperparameter Optimization",           
                    size=(1000,900), margin=8mm,
                    xscale=:log10,
                    xticks = ([1e4, 3e4, 1e5, 3e5], ["10⁴", "3×10⁴", "10⁵", "3×10⁵"]),
                    plot_titlefontsize=23,              # title size
                    guidefont=13,                       # axis title size
                    tickfont=12,                        # tick size
                    legendfontsize=12)                  # legend size


# Display and save image               
display(p)
Plots.savefig(p, joinpath(@__DIR__, "plots", "coarse_opt.pdf"))