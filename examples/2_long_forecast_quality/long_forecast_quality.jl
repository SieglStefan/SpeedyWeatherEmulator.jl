using SpeedyWeatherEmulator
using Random
using Plots, CairoMakie
using FileIO, MosaicViews


### Prepare emulator evaluation

# Fix the seed for reproducibility
Random.seed!(1234)

# Define simulation parameters and load/format simulation data generated by "generate_data.jl"
#   (we assume raw_data already exists, created by "1_hyperparameter_optimization")
const TRUNC = 5
const N_DATA = 48
const N_IC = 1000

sim_para_loading_data = SimPara(trunc=TRUNC, n_data=N_DATA, n_ic=N_IC)
sim_data = load_data(sim_para_loading_data, type="sim_data")
fd = FormattedData(sim_data)

# Define neural network and train the emulator
#sim_para_emulator = SimPara(trunc=TRUNC, n_data=N_DATA, n_ic=N_IC, id_key="_fq")

#L = 1
#W = 1024

#nn = NeuralNetwork( io_dim=2*calc_n_coeff(trunc=TRUNC),
#                    hidden_dim = W,
#                    n_hidden = L)

#em, losses = train_emulator(nn, fd; sim_para=sim_para_emulator)
#save_data(em)

### DELETE LATER
sim_para_emulator = SimPara(trunc=TRUNC, n_data=N_DATA, n_ic=N_IC, id_key="_hyperpara_L1_W1024")
em = load_data(sim_para_emulator, type="emulator")
### DELETE LATER

# Define container for rel. errors for different forecast lengths
err_vec = zeros(N_DATA)             # rel. errors of trained emulator
err_vec0 = zeros(N_DATA)            # rel. errors of idendity emulator (em(vor) = vor)


# Calculate the rel. errors 
for steps in 1:N_DATA
    err_vec[steps] = compare_emulator(  em,
                                        x_test=fd.data_pairs.x_test,
                                        y_test=fd.data_pairs.y_test,
                                        n_it=steps)
    err_vec0[steps] = compare_emulator( em,
                                        x_test=fd.data_pairs.x_test,
                                        y_test=fd.data_pairs.y_test,
                                        n_it=steps,
                                        id_em=true)     # identy emulator (em(vor) = vor)
end



### Plots of rel. errros

# Plot just the rel. error
Plots.scatter(err_vec)

# Plot comparing the trained emulator and the identiy emulator on log-axes
Plots.scatter(err_vec, yscale=:log10)
Plots.scatter!(err_vec0, yscale=:log10)



### Heatmap plots for comparison

# Define the time horizons for comparison and used initial condition
horizons = [1, 6, 24, 48]
ic = 1


# Loop for different time horizons
for h in horizons
    # Initial vorticity
    vor0 = sim_data.data[:, 1, ic]

    # Target (SpeedyWeather.jl) and emulated vorticity
    vor_sw = sim_data.data[:, h, ic]
    vor_em = vor0

    for _ in 1:h
        vor_em = em(vor_em)
    end

    # Create heatmap plots
    fig_sw = plot_heatmap(vor_sw, trunc=5, title="speedyweather: $h")
    fig_em = plot_heatmap(vor_em, trunc=5, title="emulator: $h")

    # Create output path 
    outpath_sw = joinpath(@__DIR__, "plots", "sw_$(ic)_$h.png")
    outpath_em = joinpath(@__DIR__, "plots", "em_$(ic)_$h.png")

    # Save the plots
    CairoMakie.save(outpath_sw, fig_sw)
    CairoMakie.save(outpath_em, fig_em)
end

# Load the plots and combine them 
img_sw = [load(joinpath(@__DIR__, "plots", "sw_$(ic)_$h.png")) for h in horizons]
img_em = [load(joinpath(@__DIR__, "plots", "em_$(ic)_$h.png")) for h in horizons]
imgs = vcat(img_sw, img_em) 

# Combine the heatmap plots and save the grid-plot for "first look" 
#   (the plots are later combined in another program (inkscape) for better looking plots)
grid = mosaic(imgs; nrow=length(horizons), ncol=2)
save(joinpath(@__DIR__, "plots", "_grid_ic$(ic).png"), grid)





